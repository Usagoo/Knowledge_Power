import random
from time import sleep

to_choose = [
    'Warrior', 'Paladin', 'Berzerker',
    'Monk', 'Ranger', 'Assassin',
    'Priest', 'Mage', 'Necromancer'
]


class Race:   #Defines the main class that contains all commands

    def __str__(self):
        return 'Non printable object'

    def winning(self):
        print('Winning chances: ', end='')

    def loosing(self):
        print('Loosing chances: ', end='')

    def draw(self):
        print('Draw chances: ', end='')


class Warrior(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Warrior'

    def winning(self):  #Defines the winning possibilities in the game
        return [Assassin, Priest, Monk]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Berzerker, Necromancer, Ranger]

    def draw(self):  #Defines the draw possibilities in the game
        return [Mage, Paladin, Warrior]


class Paladin(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Paladin'

    def winning(self):  #Defines the winning possibilities in the game
        return [Assassin, Monk, Necromancer]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Ranger, Priest, Mage]

    def draw(self):  #Defines the draw possibilities in the game
        return [Warrior, Berzerker, Paladin]


class Berzerker(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Berzerker'

    def winning(self):  #Defines the winning possibilities in the game
        return [Warrior, Necromancer, Ranger]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Priest, Assassin, Mage]

    def draw(self):  #Defines the draw possibilities in the game
        return [Paladin, Monk, Berzerker]


class Monk(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Monk'

    def winning(self):  #Defines the winning possibilities in the game
        return [Ranger, Mage, Priest]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Warrior, Paladin, Assassin]

    def draw(self):  #Defines the draw possibilities in the game
        return [Berzerker, Necromancer, Monk]


class Ranger(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Ranger'

    def winning(self):  #Defines the winning possibilities in the game
        return [Warrior, Paladin, Assassin]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Berzerker, Monk, Necromancer]

    def draw(self):  #Defines the draw possibilities in the game
        return [Priest, Mage, Ranger]


class Assassin(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Assassin'

    def winning(self):  #Defines the winning possibilities in the game
        return [Berzerker, Monk, Ranger, Priest]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Warrior, Paladin, Necromancer, Mage]

    def draw(self):  #Defines the draw possibilities in the game
        return [Assassin]


class Priest(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Priest'

    def winning(self):  #Defines the winning possibilities in the game
        return [Paladin, Berzerker, Necromancer]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Warrior, Monk, Mage]

    def draw(self):  #Defines the draw possibilities in the game
        return [Ranger, Assassin, Priest]


class Mage(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Mage'

    def winning(self):  #Defines the winning possibilities in the game
        return [Paladin, Berzerker, Priest, Assassin]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Monk]

    def draw(self):  #Defines the draw possibilities in the game
        return [Warrior, Ranger, Necromancer, Mage]


class Necromancer(Race):

    def __str__(self):  #When printed, the class is going to return this string
        return 'Necromancer'

    def winning(self):  #Defines the winning possibilities in the game
        return [Warrior, Ranger, Assassin]

    def loosing(self):  #Defines the loosing possibilities in the game
        return [Paladin, Berzerker, Priest]

    def draw(self):  #Defines the draw possibilities in the game
        return [Monk, Necromancer, Mage]

# Create a dictionary that translates the str inputs into the classes names
character = {'Warrior': Warrior, 'Paladin': Paladin, 'Berzerker': Berzerker, 'Monk': Monk, 'Ranger': Ranger,
             'Assassin': Assassin, 'Priest': Priest, 'Mage': Mage, 'Necromancer': Necromancer}

# Create a list with the classes that are going to be sorted by the machine
to_sort = [
    Warrior, Paladin, Berzerker,
    Monk, Ranger, Assassin,
    Priest, Mage, Necromancer
]

# Introduction
print('Hi there, be welcome to the fantasy rock paper and scissors.')
sleep(1)

# Asks if the player wants to see the rules
rules = input('Do you know how does it work? [Y/N] ')

# If the player already know the rule, game on
if rules[0].upper() == 'Y':
    print('So, let the game begin!')

# If the player don't know the rules, print them
else:
    print('Just like rock, paper and scissors, you choose a class and the computer chooses other.')
    sleep(0.5)
    print('The winning and loosing combinations are already set.')

# Introduct the classes
print('We have a total of 9 classes. ')

# Endless loop
while True:
    # Print a table with the classes
    print('-='*20)  
    print('Available classes:')
    for v in to_choose:
        print(v)

    # Asks for the players choice
    choice = input('Which character do you want to choose? ').title()

    # If the player type a class that does not exist, ask again until the machine gets a valid one
    while choice not in to_choose:
        print('Invalid character.')
        choice = input('Which character do you want to choose? ')


    def computer_choice():
        """
        Randomizes a list of characters and choose one
        """
        return random.choice(to_sort)

    # Define variables of the choice of the computer (bull) and the choice of the player (cow)
    bull = character[choice]
    cow = computer_choice()

    def replay():
        """
        Asks if the player wants to play gain
        """
        # If player's choice is yes, replay is true. If not, replay is false
        return input('Would you like to play again? [Y/N] ')[0].lower() == 'y'

    def winning():
        """
        Analizes the combination of win, loose and draw
        """
        print('The computer chose: ', end='')
        print(f'{cow()}\nYou chose: {choice}')

        # If player is in winning cobination in the computer's class, it's a loose
        if bull in cow.winning(cow):
            print('You Loose!')
            global loosing_score

        # If player is in loosing cobination in the computer's class, it's a win
        elif bull in cow.loosing(cow):
            print('You Win!')
            global winning_score

        # If player is in the computer's draw combination, it's a draw
        elif bull in cow.draw(cow):
            print("It's a draw!!")
            global draw_score

    # Uses the winning function to start the game
    winning()
    
    # Asks if the player wants to play again. If player chooses no, the replay will become false, ending the loop
    if not replay():
        print('Thanks for playing!')
        break
